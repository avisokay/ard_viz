#' For RRDS 1- referrals made by men, everything is fine.  For referrals made by women, we need to randomly
#' choose 4 and retrace the chain
#'
#' tyler
#' Rachel Heath
#' for referrals made by women, we don't happen to have info about who would have been selected randomly do we?
#' For RDS
#' For both men and women we need to trim the tree to only include people listed as preferred contacts
library(data.table)
library(ggplot2)
library(igraph)
library(dplyr)
library(haven)
library(operators)
# relative file path for referencing file dependencies
setwd("C:/Users/Adam/Desktop/code_projects/GitHub/Simulating-Respondent-Driven-Sampling")
# setwd("~/Desktop/Github/Simulating-Respondent-Driven-Sampling")
# --- 0. FUNCTIONS ----------------------------
list_referrals = function (data, ID){
# takes an ID (int) from data and returns a list of people referred by this ID
id_list = data[referrer_id == ID, referred_ID]
return(id_list)
}
# --- 1. LOAD DATA ---------------------
# intermediatefinal = as.data.table(read_dta('intermediatefinal.dta'))
# intermediatefinalphone = as.data.table(read_dta('intermediatefinalphone.dta'))
intermediatefinal = as.data.table(read_dta('for_sample_weights_1_intermed_links.dta'))
rds_df = as.data.table(read.csv('rds_nolabel.csv'))
setnames(intermediatefinal, 'q12_1', 'phone')
# keep only data for which we know info about referrers
intermediatefinal_intersect = intermediatefinal[referrer_id %in% referred_ID, ]
id_dict = readRDS('rds_id_dict.RDS')
# keep only relevant variables
# intermediatefinal = intermediatefinal[, c("referred_ID", "referred_name", "female", "recruitment", "referrer_id", "referrer_name",
#                           "Wave", "duration", "enumerator_code", "enumerator_name", "id",  "farea1", "pre5",
#                           "pre5_other", "exper_years", "exper_months", "schooling_years", "degree_phone", "random",
#                           "wave_unconfirmed", "interviewdate", "gender", "tot_exper_m", "tot_exper_y", "school_bin",
#                           "exper_bin")]
# subset into rds/rrds and male/female
rrds_sub = intermediatefinal[random == 1, ]
rds_sub = intermediatefinal[random == 0, ]
rrds_female_sub = rrds_sub[female == 1]
rrds_men_sub = rrds_sub[female == 0, ]
rds_female_sub = rds_sub[female == 1]
rds_men_sub = rds_sub[female == 0, ]
# --- 2. FEMALE REFERRAL RETRACING ---------------------
# All Wave 1 referred by people are not themselves in the data as referred_ID
for (i in unique(intermediatefinal[Wave == 1, referrer_id])) {
if (i %in% intermediatefinal$referred_ID){
print(i)
}
}
# For each RRDS Female in each wave:
# 1. look at all referrals,
# 2. randomly select up to 4 and add those ID's to list
set.seed(123)
retrace_list = list()
num_referrals = list()
for (wave in 1:30) {
for (i in rrds_female_sub[Wave == wave, referred_ID]) {
if (i %in% intermediatefinal$referrer_id) {
referrals = list_referrals(rrds_female_sub, i)
draws = sample(referrals, size = min(4, length(referrals)))
num_referrals = c(num_referrals, length(referrals))
retrace_list = c(retrace_list, draws)
}
}
}
num_referrals = unlist(c(num_referrals, rep(0, nrow(rrds_female_sub) - length(num_referrals))))
# Most people dont refer
barplot(table(num_referrals), main = 'RRDS Female Number of Referrals: \nMost People Don\'t Refer')
# new retraced df
rrds_female_retraced_df = rrds_female_sub[referred_ID %in% retrace_list, ]
# From Raied:
# The variables q8a, q8b, q8c, and q8d have the preferred or random referrals listed
# (preferred referrals for the variable "random==0" and random referrals for "random==1").
# In particular, for the combination of conditions random==1 & q5==2 (females),
# the numbers in q8a, q8b, q8c, and q8d give us the randomly selected referrals
# referred by females that would have been followed. The values under the q8a-q8d
# columns are the values from col1_*.
#
# For example, if the value under q8a is say, 7, this means, the 7th person our
# respondent listed as a referral has come up as the first person to be surveyed
# through the random selection process. Their details are recorded under these
# variables: col1_7 col2_7 col3_7 col4a_7 col4_7 col4_others_7 col5_7 col6_7
# col7d_7 col7_7 col7_others_7 col8_7 col9_7 col10_7.
# From Tyler:
# i think if i understand correctly we just want to match the ids of these 1k
#
# with the people in the detailed final sample
#
# and it would be intereting to look at descriptives (forget weights for the moment)
#
# for the women in the final sample selected with "pure" rrds (part of this 1k) compared to
# "not pure" rrds, so selected bc of taking all  referrals from women
# --- 3. IDENTIFYING PREFERRED IN RRDS ARM (TREE TRIMMING) ---------------------
# 63% NA for q8a
sum(is.na(rrds_female_sub$q8a))/nrow(rrds_female_sub)
barplot(table(rrds_female_sub$q8a),
main = "q8a Referrals. q8a == 5 means the 5th person \n listed as referral is first randomly selected.")
# 72% NA for q8b
sum(is.na(rrds_female_sub$q8b))/nrow(rrds_female_sub)
barplot(table(rrds_female_sub$q8b),
main = "q8b Referrals. q8b == 5 means the 5th person \n listed as referral is second randomly selected.")
# 78% NA for q8c
sum(is.na(rrds_female_sub$q8c))/nrow(rrds_female_sub)
barplot(table(rrds_female_sub$q8c),
main = "q8c Referrals. q8c == 5 means the 5th person \n listed as referral is third randomly selected.")
# 87%% NA for q8d
sum(is.na(rrds_female_sub$q8d))/nrow(rrds_female_sub)
barplot(table(rrds_female_sub$q8d),
main = "q8d Referrals. q8d == 5 means the 5th person \n listed as referral is fourth randomly selected.")
# look up the referred_ID and order by who is prioritized by referrer
for (ID in rrds_female_sub[!is.na(q8a), ]$referred_ID[1:5]){
first = rrds_female_sub[referred_ID == ID, q8a]
second = rrds_female_sub[referred_ID == ID, q8b]
third = rrds_female_sub[referred_ID == ID, q8c]
fourth = rrds_female_sub[referred_ID == ID, q8d]
df = intermediatefinal[referrer_id == ID, ]
print(c(first, second, third, fourth))
print(df[, c('referred_ID', 'referrer_id', 'id', 'q8a', 'q8b', 'q8c', 'q8d')])
print(c(intermediatefinal[referrer_id == ID, referred_ID][first],
intermediatefinal[referrer_id == ID, referred_ID][second],
intermediatefinal[referrer_id == ID, referred_ID][third],
intermediatefinal[referrer_id == ID, referred_ID][fourth]))
}
rrds_pref1 = list()
for (ID in rrds_female_sub[!is.na(q8a), ]$referred_ID){
first = rrds_female_sub[referred_ID == ID, q8a]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rrds_pref1[[length(rrds_pref1) + 1]] = result
}
}
rrds_pref2 = list()
for (ID in rrds_female_sub[!is.na(q8a), ]$referred_ID){
first = rrds_female_sub[referred_ID == ID, q8b]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rrds_pref2[[length(rrds_pref2) + 1]] = result
}
}
rrds_pref3 = list()
for (ID in rrds_female_sub[!is.na(q8a), ]$referred_ID){
first = rrds_female_sub[referred_ID == ID, q8c]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rrds_pref3[[length(rrds_pref3) + 1]] = result
}
}
rrds_pref4 = list()
for (ID in rrds_female_sub[!is.na(q8a), ]$referred_ID){
first = rrds_female_sub[referred_ID == ID, q8d]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rrds_pref4[[length(rrds_pref4) + 1]] = result
}
}
rrds_all_pref = unlist(c(rrds_pref1, rrds_pref2, rrds_pref3, rrds_pref4))
# update linksdata
intermediatefinal[, rrds_first_ref := ifelse(referred_ID %in% rrds_pref1, 1, 0)]
intermediatefinal[, rrds_second_ref := ifelse(referred_ID %in% rrds_pref2, 1, 0)]
intermediatefinal[, rrds_third_ref := ifelse(referred_ID %in% rrds_pref3, 1, 0)]
intermediatefinal[, rrds_fourth_ref := ifelse(referred_ID %in% rrds_pref4, 1, 0)]
intermediatefinal[, rrds_included_as_contact := ifelse(rrds_first_ref == 0 &
rrds_second_ref == 0 &
rrds_third_ref == 0 &
rrds_fourth_ref == 0,
0, 1)]
# subset links data to just those who were in the top 4 recommended by referrers
rrds_results_df = intermediatefinal[referred_ID %in% rrds_all_pref, ]
nrow(rrds_results_df)
barplot(table(rrds_results_df$q5), main = 'Random Referrals: Female(2) and \n Male(1) from RRDS_FEMALE')
# COUNT how many referrals were made by the female rrds in IM data
referrals_count = 0
for (i in unique(rrds_female_sub$referred_ID)){
referrals_count = referrals_count + nrow(intermediatefinal[referrer_id == i, ])
}
referrals_count
# MATCH LINKS TO FINAL DATA USING PHONE NUMBERS
length(unique(rds_df$r_phone))
length(unique(intermediatefinal$phone))
phones_overlap = intersect(rds_df$r_phone, intermediatefinal$phone)
length(phones_overlap)
intermediatefinal[, rrds_included_in_final := ifelse(phone %in% phones_overlap, 1, 0)]
# SUBSET OF PEOPLE WHO ARE INCLUDED IN FINAL AND ARE IN THE PREFERRED CONTACTS OF THEIR REFERRER
rrds_counterfactual_included = intermediatefinal[rrds_included_as_contact == 1 & rrds_included_in_final == 1, ]
rrds_counterfactual_excluded = intermediatefinal[rrds_included_as_contact == 1 & rrds_included_in_final == 0, ]
barplot(table(rrds_counterfactual_included$female), main = "RRDS Male(0) and Female(1) Counterfactual Included")
barplot(table(rrds_counterfactual_excluded$female), main = "RRDS Male(0) and Female(1) Counterfactual Excluded")
# counterfactual rrds
length(rrds_results_df$phone)
# final results
length(rds_df$phone)
# IM and final results overlap
length(phones_overlap)
# counterfactual rrds and final results overlap
length(intersect(rrds_results_df$phone, rds_df$phone))
# counterfactual include and results overlap
length(intersect(phones_overlap, rrds_results_df$phones))
# --- 4. RDS PREFERRED COUNTERFACTUAL -------------------
rds_pref1 = list()
for (ID in rds_female_sub[!is.na(q8a), ]$referred_ID){
first = rds_female_sub[referred_ID == ID, q8a]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rds_pref1[[length(rds_pref1) + 1]] = result
}
}
rds_pref2 = list()
for (ID in rds_female_sub[!is.na(q8a), ]$referred_ID){
first = rds_female_sub[referred_ID == ID, q8b]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rds_pref2[[length(rds_pref2) + 1]] = result
}
}
rds_pref3 = list()
for (ID in rds_female_sub[!is.na(q8a), ]$referred_ID){
first = rds_female_sub[referred_ID == ID, q8c]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rds_pref3[[length(rds_pref3) + 1]] = result
}
}
rds_pref4 = list()
for (ID in rds_female_sub[!is.na(q8a), ]$referred_ID){
first = rds_female_sub[referred_ID == ID, q8d]
df = intermediatefinal[referrer_id == ID, ]
result = intermediatefinal[referrer_id == ID, referred_ID][first]
if (!is.na(result)){
rds_pref4[[length(rds_pref4) + 1]] = result
}
}
rds_all_pref = unlist(c(rds_pref1, rds_pref2, rds_pref3, rds_pref4))
# update linksdata
intermediatefinal[, rds_first_ref := ifelse(referred_ID %in% rds_pref1, 1, 0)]
intermediatefinal[, rds_second_ref := ifelse(referred_ID %in% rds_pref2, 1, 0)]
intermediatefinal[, rds_third_ref := ifelse(referred_ID %in% rds_pref3, 1, 0)]
intermediatefinal[, rds_fourth_ref := ifelse(referred_ID %in% rds_pref4, 1, 0)]
intermediatefinal[, rds_included_as_contact := ifelse(rds_first_ref == 0 &
rds_second_ref == 0 &
rds_third_ref == 0 &
rds_fourth_ref == 0,
0, 1)]
# subset links data to just those who were in the top 4 recommended by referrers
rds_results_df = intermediatefinal[referred_ID %in% rds_all_pref, ]
nrow(rds_results_df)
barplot(table(rds_results_df$q5), main = 'Preferred Referrals: Female(2) and \n Male(1) from RDS_FEMALE')
# COUNT how many referrals were made by the female rrds in IM data
referrals_count = 0
for (i in unique(rds_female_sub$referred_ID)){
referrals_count = referrals_count + nrow(intermediatefinal[referrer_id == i, ])
}
referrals_count
# MATCH LINKS TO FINAL DATA USING PHONE NUMBERS
length(unique(rds_df$r_phone))
length(unique(intermediatefinal$phone))
phones_overlap = intersect(rds_df$r_phone, intermediatefinal$phone)
length(phones_overlap)
intermediatefinal[, rds_included_in_final := ifelse(phone %in% phones_overlap, 1, 0)]
# SUBSET OF PEOPLE WHO ARE INCLUDED IN FINAL AND ARE IN THE PREFERRED CONTACTS OF THEIR REFERRER
rds_counterfactual_included = intermediatefinal[rds_included_as_contact == 1 & rds_included_in_final == 1, ]
rds_counterfactual_excluded = intermediatefinal[rds_included_as_contact == 1 & rds_included_in_final == 0, ]
barplot(table(rds_counterfactual_included$female), main = "RDS Male(0) and Female(1) Counterfactual Included")
barplot(table(rds_counterfactual_excluded$female), main = "RDS Male(0) and Female(1) Counterfactual Excluded")
# counterfactual rrds
length(rds_results_df$phone)
# final results
length(rds_df$phone)
# IM and final rds_results overlap
length(phones_overlap)
# counterfactual rrds and final results overlap
length(intersect(rds_results_df$phone, rds_df$phone))
# counterfactual include and results overlap
length(intersect(phones_overlap, rds_results_df$phones))
# --- 5. FINAL RESULTS TRACING ------------------------
# overlap between final and IM links by sex/recruitment
nrow(intermediatefinal[phone %in% phones_overlap, ])
table(intermediatefinal[phone %in% phones_overlap, ]$female)
table(intermediatefinal[phone %in% phones_overlap, ]$random)
# overlap between counterfactual included and final by sex/recruitment in RRDS
nrow(rrds_results_df[phone %in% phones_overlap, ])
table(rrds_results_df[phone %in% phones_overlap, ]$female)
table(rrds_results_df[phone %in% phones_overlap, ]$random)
# overlap between counterfactual included and final by sex/recruitment in RDS
nrow(rds_results_df[phone %in% phones_overlap, ])
table(rds_results_df[phone %in% phones_overlap, ]$female)
table(rds_results_df[phone %in% phones_overlap, ]$random)
# FINAL NOT FROM LINKS
final_not_from_links = rds_df[phone %!in% unique(intermediatefinal$phone)]
barplot(table(final_not_from_links$female), main = 'Male (0) Female (1) in FINAL \n NOT from IM  (n=1957)')
# FINAL FROM LINKS
final_from_links = rds_df[phone %in% unique(intermediatefinal$phone)]
barplot(table(final_from_links$female), main = 'Male (0) Female (1) in FINAL \n from IM LINK (n=1678)')
# FINAL FROM RDS COUNTERFACTUAL
final_from_rds_counterfactual = rds_df[phone %in% unique(rds_counterfactual_included$phone)]
barplot(table(final_from_rds_counterfactual$female), main = 'Male (0) Female (1) in FINAL \n RDS Counterfactual (n=47)')
# FINAL FROM RRDS COUNTERFACTUAL
final_from_rrds_counterfactual = rds_df[phone %in% unique(rrds_counterfactual_included$phone)]
barplot(table(final_from_rrds_counterfactual$female), main = 'Male (0) Female (1) in FINAL \n RRDS Counterfactual (n=254)')
# Waves barplot : From IM Links or Not
barplot(table(rds_df$wave), main = "Respondents by Wave: Overall Final Sample")
barplot(table(rds_df[phone %in% final_from_links$phone, wave]), main = "Respondents by Wave: From IM Links")
barplot(table(rds_df[phone %in% final_not_from_links$phone, wave]), main = "Respondents by Wave: Not in IM Links")
nrow(final_from_links)
nrow(final_from_links[phone %in% unique(final_from_links$phone), ])
nrow(final_not_from_links)
nrow(final_not_from_links[phone %in% unique(final_not_from_links$phone), ])
# Find duplicate Phone number in final, look up in IM Links
head(duplicated(rds_df$phone), 25)
head(rds_df$phone, 25)
rds_df$phone[4]
rds_df$phone[4] %in% intermediatefinal$phone
# Two entries in IM Links
intermediatefinal[phone == rds_df$phone[4], ]
# No entries in IM Links
intermediatefinal[phone == rds_df$phone[13], ]
# One entry in IM Links
intermediatefinal[phone == rds_df$phone[20], ]
# Find phone number in Final that is NOT IN IM links and double check to see if that number appears  in previous wave
rds_df$wave[13]
nrow(rds_df[wave == 4, ])
rds_df[wave == 4, phone]
rds_df$phone[13] %in% rds_df[wave == 4, phone]
rds_df[phone == rds_df$phone[4], c('interviewdate', 'enu_name', 'phone', 'female', 'aq2', 'wave')]
rds_df[phone == rds_df$phone[13], c('interviewdate', 'enu_name', 'phone', 'female', 'aq2', 'wave')]
rds_df[phone == rds_df$phone[20], c('interviewdate', 'enu_name', 'phone', 'female', 'aq2', 'wave')]
intersect(rds_df$col8_1, intermediatefinal$phone)
# --- 6. FOUND THE MISSING PHONE NUMBERS IN FINAL -----------
# r7ac* r7bc* r9ac* r9bc* are the referrals for women who currently work, men who currently work, women who have left, men who have currently left
# need to
#   1. identify final survey people who did not come from IM links
#   2. trace their chain back to IM links using phone number referrals
# rds == 1 if in RANDOM RDS ARM
# rds == 0 if in NORMAL RDS ARM
# rds_df[, rrds := 1]
# if in NORMAL RDS ARM
rds_df[phone %in% final_from_rds_counterfactual$phone, rrds := ifelse(final_from_rds_counterfactual$random_seed == 0, TRUE, FALSE)]
table(rds_df[, rrds])
final_from_links$random_seed
final_from_rds_counterfactual$random_seed
final_from_rrds_counterfactual$random_seed
# rds_cf == 1 if part of chain listed as preferred/random in IM LINKS
# rds_cf == 0 if not above
rds_df[, rds_cf:= NA]
rds_df$random_seed
intermediatefinal$random
head(rds_df$r7ac10_1, 25)
head(rds_df$r7bc10_1, 25)
head(rds_df$r9ac10_1, 25)
head(rds_df$r9bc10_1, 25)
# --- 7. Trace RDS/RRDS Chains -----------
# first, for overlapping phone numbers, look up random in Intermediate links and update final
table(rds_df$random_seed, exclude = FALSE)
table(final_not_from_links$random_seed, exclude = FALSE)
overlap_df = merge(x = rds_df, y = intermediatefinal[ , c("random", "phone")], by = "phone", all.x=TRUE)
# drop rows where phone is NA
overlap_df = overlap_df[!is.na(phone), ]
head(overlap_df[, c("random", "phone")],25)
table(overlap_df$random, exclude = FALSE)
missing_df = overlap_df[is.na(random), ]
head(missing_df[, c("random", "phone")],25)
table(missing_df$random, exclude = FALSE)
overlap_na = overlap_df[is.na(random_seed), ]
# list of r7ac* r7bc* r9ac* r9bc* column indices
vars = c("r7ac", "r7bc", "r9ac", "r9bc")
referrals = list(1, 1793) #phone and random_seed
for (var in vars) {
referrals[[length(referrals) + 3]] = grep(var, colnames(overlap_df))
}
referrals = unlist(referrals)
vars_df = overlap_df[, referrals, with=FALSE]
table(vars_df$random_seed, exclude = FALSE)
# mode function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
load("C:/Users/Adam/Downloads/map_example.rda")
View(map_example)
numbers = list()
for (phone_n in rds_df[is.na(random_seed), phone]){
numbers[[length(numbers) + 1]] = (c(phone_n, getmode(vars_df[which(vars_df == phone_n, arr.ind=TRUE)[, 1], random_seed])))
}
numbers = unlist(numbers)
numbers[numbers[2]]
install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
?dashboardPage
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
?dashboardSidebar
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
library(shiny)
library(shinydashboard)
library(visNetwork)
library(data.table)
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
install.packages("leaflet")
library(leaflet)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='avisokay',
token='61436656192602427800EBD0F5814037',
secret='<SECRET>')
rsconnect::setAccountInfo(name='avisokay',
token='61436656192602427800EBD0F5814037',
secret='66+/pUBRwkk7WoD4zc3hRLowuOK44iH9vvo2AcL/')
library(rsconnect)
setwd("C:/Users/Adam/Desktop/code_projects/Github/ard_viz")
rsconnect::deployApp('viz_presentation_slides.Rmd')
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
runApp('C:/Users/Adam/Desktop/code_projects/Github/SAGAA_release')
